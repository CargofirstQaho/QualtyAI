// controllers/indianinspector-controller.js
const db = require("../models"); // instead of "../db"
// Import the Sequelize instance and models
const IndianInspector = db.indianInspectors; // Access the IndianInspector model
const bcrypt = require("bcryptjs"); // For password hashing

// Helper function to get userId (can be enhanced with actual authentication later)
// In a real application, userId would come from an authenticated user's session/token.
const getUserId = (req) => req.query.userId || "backend_user_id";

// Get all inspectors
exports.getAllInspectors = async (req, res) => {
  try {
    const userId = getUserId(req);
    // Find all inspectors belonging to the specific userId
    const inspectors = await IndianInspector.findAll({
      where: { userId: userId },
      order: [["createdAt", "DESC"]], // Order by creation date descending
    });
    res.status(200).json(inspectors);
  } catch (error) {
    console.error("Error fetching inspectors:", error);
    res
      .status(500)
      .json({ message: "Failed to retrieve inspectors", error: error.message });
  }
};

// Get a single inspector by ID
exports.getInspectorById = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = getUserId(req);

    // Find an inspector by primary key (id) and ensure it belongs to the userId
    const inspector = await IndianInspector.findOne({
      where: { id: id, userId: userId },
    });

    if (!inspector) {
      return res.status(404).json({ message: "Inspector not found" });
    }

    res.status(200).json(inspector);
  } catch (error) {
    console.error("Error fetching inspector:", error);
    res
      .status(500)
      .json({ message: "Failed to retrieve inspector", error: error.message });
  }
};

// Add a new inspector
exports.addInspector = async (req, res) => {
  try {
    const { userId = "backend_user_id", password, ...inspectorData } = req.body;

    // Basic validation for required fields (Sequelize model also handles allowNull: false)
    const requiredFields = [
      "name",
      "mobileNumber",
      "emailId",
      "address",
      "commodityName",
      "experience",
      "bankAccountNumber",
      "bankName",
      "ifscCode",
      "password",
    ];
    const missingFields = requiredFields.filter((field) => !req.body[field]);
    if (missingFields.length > 0) {
      return res.status(400).json({
        message: `Missing required fields: ${missingFields.join(", ")}`,
      });
    }

    // Hash the password before saving to the database
    const hashedPassword = await bcrypt.hash(password, 10); // 10 is the salt rounds

    // Create a new inspector record using the Sequelize model
    const createdInspector = await IndianInspector.create({
      ...inspectorData,
      password: hashedPassword, // Store the hashed password
      userId: userId, // Associate with the current user
      // indianInspectorId is auto-generated by DataTypes.UUIDV4 in the model
    });

    // Exclude password from the response for security
    const responseInspector = createdInspector.toJSON();
    delete responseInspector.password;

    res.status(201).json({
      message: "Inspector added successfully!",
      inspector: responseInspector,
    });
  } catch (error) {
    console.error("Error adding inspector:", error);
    // Handle unique constraint violation (e.g., for emailId)
    if (error.name === "SequelizeUniqueConstraintError") {
      return res.status(409).json({
        message: "Email ID already exists. Please use a different one.",
      });
    }
    res
      .status(500)
      .json({ message: "Failed to add inspector", error: error.message });
  }
};

// Update an existing inspector
exports.updateInspector = async (req, res) => {
  try {
    const { id } = req.params;
    const { userId = "backend_user_id", password, ...updatedData } = req.body;

    // Find the inspector first to ensure it exists and belongs to the user
    const inspector = await IndianInspector.findOne({
      where: { id: id, userId: userId },
    });

    if (!inspector) {
      return res
        .status(404)
        .json({ message: "Inspector not found or not authorized to update" });
    }

    // If password is provided in the update, hash it
    if (password) {
      updatedData.password = await bcrypt.hash(password, 10);
    }

    // Update the inspector record
    await inspector.update(updatedData);

    // Exclude password from the response for security
    const responseInspector = inspector.toJSON();
    delete responseInspector.password;

    res.status(200).json({
      message: "Inspector updated successfully!",
      inspector: responseInspector,
    });
  } catch (error) {
    console.error("Error updating inspector:", error);
    if (error.name === "SequelizeUniqueConstraintError") {
      return res.status(409).json({
        message: "Email ID already exists. Please use a different one.",
      });
    }
    res
      .status(500)
      .json({ message: "Failed to update inspector", error: error.message });
  }
};

// Delete an inspector
exports.deleteInspector = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = getUserId(req);

    // Destroy the inspector record
    const deletedCount = await IndianInspector.destroy({
      where: { id: id, userId: userId },
    });

    if (deletedCount === 0) {
      return res
        .status(404)
        .json({ message: "Inspector not found or not authorized to delete" });
    }

    res.status(200).json({ message: "Inspector deleted successfully!" });
  } catch (error) {
    console.error("Error deleting inspector:", error);
    res
      .status(500)
      .json({ message: "Failed to delete inspector", error: error.message });
  }
};
